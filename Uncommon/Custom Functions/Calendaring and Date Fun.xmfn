<?xml version="1.0" encoding="UTF-8"?><FMClipboard><Version><![CDATA[41011080]]></Version><Comment><![CDATA[This is a set of Default custom functions]]></Comment><SourceWindowName></SourceWindowName><Class>XMFN</Class><ClipVersion>1</ClipVersion><ClipTimeStamp>3558547000</ClipTimeStamp><ClipAuthor><![CDATA[oscarbautista]]></ClipAuthor><clipboardAsText><![CDATA[calfirstofwk( dt )
DateQuarterBegin( theDate )
DateQuarterEnd( theDate )
DayNametoDayOfWeek( theDayName )
FYQ( Start;theDate )
MonthEnd( StartDate;Months )
GetWorkDays( StartDate;DueDate )
FMPDate_to_SQLDate( text )
Year_Range_Hire_versus_Selected( Selected_Year;Hire_Date )
Year_Range_Hire_versus_Selected( Selected_Year;Hire_Date )
AGE( BirthDate )
Year_Range_Hire_versus_Selected( Selected_Year;Hire_Date )
AppointmentDateRange( s;e;t )
dateformatzeros( date_field )
DateRange( StartDate;EndDate;RangeLimit )
DateRangeConditWeekends( StartDate;EndDate;Weekend )
DayRange( s;e )
FirstDayThisWeek( StartDay )
MonthRange( s;e )
SQLDate_to_FMPDate( _Date )
WeekofFiscalYear( TheDate;StartingDay;StartMonth;StartDay )
WeekRange( s;e )
YearMonthYear( startDate;endDate;fontSize;separator;red;green;blue )
YearRange( s;e )
GetWorkDays( StartDate;DueDate )]]></clipboardAsText><Clipboard><fmxmlsnippet type="FMObjectList"><CustomFunction id="4" functionArity="1" visible="True" parameters="dt" name="calfirstofwk"><Calculation>dt - DayOfWeek ( dt ) + 1</Calculation></CustomFunction><CustomFunction id="55" functionArity="1" visible="True" parameters="theDate" name="DateQuarterBegin"><Calculation>//NAME: DateQuarterBegin
//PURPOSE: Pass any date and get the quarter start date based on input date.
//PARAMETER: theDate
//INCLUDES OTHER CUSTOM FUNCTIONS: No
//AUTHOR: Chiyoko Yoshida chiyofm@gmail.com
//EXAMPLE INPUT: 7/15/2010 
//EXPECTED OUTPUT: 7/1/2010

Let ([

$d = theDate;
$m = Month($d);
$y = Year($d)

];

If ( $m &gt; 9 ; Date (10;1;$y);
If ( $m &gt; 6 ; Date (7;1;$y);
If ($m &gt; 3 ; Date (4;1;$y);
Date(1;1;$y)
)))

)</Calculation></CustomFunction><CustomFunction id="56" functionArity="1" visible="True" parameters="theDate" name="DateQuarterEnd"><Calculation>//NAME: DateQuarterEnd
//PURPOSE: Pass any date and return the quarter END date based on the input date.
//PARAMETER: theDate
//INCLUDES OTHER CUSTOM FUNCTIONS: No
//CREATED BY: Chiyoko Yoshida chiyofm@gmail.com
//EXAMPLE INPUT: 7/15/2010 
//EXPECTED OUTPUT: 9/30/2010

Let ([

$d = theDate;
$m = Month($d);
$y = Year($d)

];

If ( $m &gt; 9 ; Date (12;31;$y);
If ( $m &gt; 6 ; Date (9;30;$y);
If ($m &gt; 3 ; Date (6;30;$y);
Date(3;31;$y)
)))

)</Calculation></CustomFunction><CustomFunction id="28" functionArity="1" visible="True" parameters="theDayName" name="DayNametoDayOfWeek"><Calculation>//Used for Time Sheet Calculations
Let([
day = Date ( 12 ; 31 ; 2000 )
];
Substitute (theDayName; [DayName ( day ) ; 1];
                                          [DayName ( day + 1 ) ; 2];
                                          [DayName ( day + 2 ) ; 3]; 
                                          [DayName ( day + 3 ) ; 4]; 
                                          [DayName ( day + 4 ) ; 5]; 
                                          [DayName ( day + 5 ) ; 6]; 
                                          [DayName ( day + 6 ) ; 7]
)
)</Calculation></CustomFunction><CustomFunction id="58" functionArity="2" visible="True" parameters="Start;theDate" name="FYQ"><Calculation>/* FYQ ( Start ; theDate ) */

/*Custom Function by Matt Wills (http://www.VirtualVermont.com/FMP)*/

Let ( [
Mo = Right ( "0" &amp; Month ( theDate ) ; 2 ) ;
Months = "01 02 03 04 05 06 07 08 09 10 11 12" ;
Months = "  " &amp; MiddleWords ( Months ; Start ; 12 ) &amp; " " &amp; LeftWords ( Months ; Start -1 ) ] ;

Choose ( Position ( Months ; Mo ; 1 ; 1 ) / 3 ; ""; "1" ; "1" ; "1" ; "2" ; "2" ; "2" ; "3" ; "3" ; "3" ; "4" ; "4" ; "4" )  &amp; 

"Q" &amp; Right ( If ( Start = 1 ; Year ( theDate ) ; Year ( theDate ) + 1 ) ; 2 )

)</Calculation></CustomFunction><CustomFunction id="70" functionArity="2" visible="True" parameters="StartDate;Months" name="MonthEnd"><Calculation>/*

MonthEnd ( StartDate ; Months )
Purpose:    Returns the date of the last day of the month the specified number of months from the StartDate.
Author:    Josh Ormond

*/

Date ( Month ( StartDate ) + ( Months + 1 ) ; 0 ; Year ( StartDate ) )

// ===================================
/*

This function is published on BrianDunning.com to check for updates and provide feedback and bug reports please visit:
http://www.briandunning.com/filemaker-custom-functions/detail.php?fn_id=1305


Function: MonthEnd( StartDate; Months )
Author: Josh Ormond
Last updated: 18 May 2011
Version: 1.1

*/
// ===================================</Calculation></CustomFunction><CustomFunction id="35" functionArity="2" visible="True" parameters="StartDate;DueDate" name="GetWorkDays"><Calculation>Int ( ( DueDate - StartDate ) / 7 ) * 5 

+ 

Case ( 
DayOfWeek ( DueDate ) &lt; DayOfWeek ( StartDate ) ; 
Min ( 5 ; DayOfWeek ( DueDate ) - 1 ) + Max ( 0 ; 6 - DayOfWeek ( StartDate ) ) ;

DayOfWeek ( StartDate ) &lt; 7 ; 
Min ( 6 ; DayOfWeek ( DueDate ) ) - DayOfWeek ( StartDate ) ; 

0 
) + 1</Calculation></CustomFunction><CustomFunction id="83" functionArity="1" visible="True" parameters="text" name="FMPDate_to_SQLDate"><Calculation>

Let ( [ 
	t1 = text ; 
	t2 = Substitute ( t1 ; "/" ; ¶ ) ;

	dd = GetValue ( t2 ; 1 ) ;
	mm = GetValue ( t2 ; 2 ) ;
	yyyy = GetValue ( t2 ; 3 ) ;
	sep = "-"

] ; 

yyyy &amp; sep &amp; mm &amp; sep &amp; dd

) // Let</Calculation></CustomFunction><CustomFunction id="168" functionArity="2" visible="True" parameters="Selected_Year;Hire_Date" name="Year_Range_Hire_versus_Selected"><Calculation>/*

				Find Date Range 1 Year - 1 year based on Hire Date
Inputs: 
Selected Year 
Hire Date 

How it works: 
Seleted Year is evaluated against the hire date to idenitfy if a year spanning last year to a future date is correct or a current date to a date next year. 

Example (1) Previous to Current: 
Hire Date = 2/1/2018
Selected Year = 2018
Current Date = 1/5/2019
Output = 
2/1/2018 - 2/1/2019

Example (2) Current to Next: 
Hire Date = 2/1/2018
Selected Year = 2019
Current Date = 3/5/2019
Output = 
2/1/2019 - 2/1/2020

*/




Let ( [
/////////////////////// ------ Prep------ ///////////////////////

//		Current Date Values
~Current_date = GetAsDate ( Get ( CurrentDate ) ); 
~current_month = Month ( ~Current_date ) ;
~Selected_Year = Selected_Year ;

//		Hire Date Values
~hire_date = Hire_Date ;
~hire_month = Month ( ~hire_date ) ;

~hire_Month_Day = ~hire_month &amp;"/"&amp; Day ( ~hire_date ) ; 

/////////////////////// ------ START------ ///////////////////////

~Test = If ( GetAsDate ( ~hire_Month_Day ) &gt; ~Current_date ; 1 ; 0 ) ;

$Range_date_start = GetAsDate (
					Case ( ~test = 1 ;
						 ~hire_Month_Day &amp; "/" &amp; (~Selected_Year -1) ;
						 ~hire_Month_Day &amp; "/" &amp; ~Selected_Year) 
							); 

$Range_date_end = GetAsDate (
					Case ( ~test = 1 ;
						 ~hire_Month_Day &amp; "/" &amp; ~Selected_Year ;
						 ~hire_Month_Day &amp; "/" &amp; ~Selected_Year + 1) 
							); 

~result = Case ( IsValid ( $Range_date_start ) and IsValid ( $Range_date_end ) ; 1 ; 0 )  ];

~result 
//&amp;¶&amp; $Range_date_start &amp; " - " &amp; $Range_date_end
	 )</Calculation></CustomFunction><CustomFunction id="169" functionArity="2" visible="True" parameters="Selected_Year;Hire_Date" name="Year_Range_Hire_versus_Selected"><Calculation>/*

				Find Date Range 1 Year - 1 year based on Hire Date
Inputs: 
Selected Year 
Hire Date 

How it works: 
Seleted Year is evaluated against the hire date to idenitfy if a year spanning last year to a future date is correct or a current date to a date next year. 

Example (1) Previous to Current: 
Hire Date = 2/1/2018
Selected Year = 2018
Current Date = 1/5/2019
Output = 
2/1/2018 - 2/1/2019

Example (2) Current to Next: 
Hire Date = 2/1/2018
Selected Year = 2019
Current Date = 3/5/2019
Output = 
2/1/2019 - 2/1/2020

*/




Let ( [
/////////////////////// ------ Prep------ ///////////////////////

//		Current Date Values
~Current_date = GetAsDate ( Get ( CurrentDate ) ); 
~current_month = Month ( ~Current_date ) ;
~Selected_Year = Selected_Year ;

//		Hire Date Values
~hire_date = Hire_Date ;
~hire_month = Month ( ~hire_date ) ;

~hire_Month_Day = ~hire_month &amp;"/"&amp; Day ( ~hire_date ) ; 

/////////////////////// ------ START------ ///////////////////////

~Test = If ( GetAsDate ( ~hire_Month_Day ) &gt; ~Current_date ; 1 ; 0 ) ;

$Range_date_start = GetAsDate (
					Case ( ~test = 1 ;
						 ~hire_Month_Day &amp; "/" &amp; (~Selected_Year -1) ;
						 ~hire_Month_Day &amp; "/" &amp; ~Selected_Year) 
							); 

$Range_date_end = GetAsDate (
					Case ( ~test = 1 ;
						 ~hire_Month_Day &amp; "/" &amp; ~Selected_Year ;
						 ~hire_Month_Day &amp; "/" &amp; ~Selected_Year + 1) 
							); 

~result = Case ( IsValid ( $Range_date_start ) and IsValid ( $Range_date_end ) ; 1 ; 0 )  ];

~result 
//&amp;¶&amp; $Range_date_start &amp; " - " &amp; $Range_date_end
	 )</Calculation></CustomFunction><CustomFunction id="34" functionArity="1" visible="True" parameters="BirthDate" name="AGE"><Calculation>Year (Get(CurrentDate)) - 
Year (BirthDate) - 
( 
Get (CurrentDate) &lt; Date ( 
Month (BirthDate); 
Day (BirthDate); 
Year (Get(CurrentDate))
) 
)</Calculation></CustomFunction><CustomFunction id="167" functionArity="2" visible="True" parameters="Selected_Year;Hire_Date" name="Year_Range_Hire_versus_Selected"><Calculation>/*

				Find Date Range 1 Year - 1 year based on Hire Date
Inputs: 
Selected Year 
Hire Date 

How it works: 
Seleted Year is evaluated against the hire date to idenitfy if a year spanning last year to a future date is correct or a current date to a date next year. 

Example (1) Previous to Current: 
Hire Date = 2/1/2018
Selected Year = 2018
Current Date = 1/5/2019
Output = 
2/1/2018 - 2/1/2019

Example (2) Current to Next: 
Hire Date = 2/1/2018
Selected Year = 2019
Current Date = 3/5/2019
Output = 
2/1/2019 - 2/1/2020

*/




Let ( [
/////////////////////// ------ Prep------ ///////////////////////

//		Current Date Values
~Current_date = GetAsDate ( Get ( CurrentDate ) ); 
~current_month = Month ( ~Current_date ) ;
~Selected_Year = Selected_Year ;

//		Hire Date Values
~hire_date = Hire_Date ;
~hire_month = Month ( ~hire_date ) ;

~hire_Month_Day = ~hire_month &amp;"/"&amp; Day ( ~hire_date ) ; 

/////////////////////// ------ START------ ///////////////////////

~Test = If ( GetAsDate ( ~hire_Month_Day ) &gt; ~Current_date ; 1 ; 0 ) ;

$Range_date_start = GetAsDate (
					Case ( ~test = 1 ;
						 ~hire_Month_Day &amp; "/" &amp; (~Selected_Year -1) ;
						 ~hire_Month_Day &amp; "/" &amp; ~Selected_Year) 
							); 

$Range_date_end = GetAsDate (
					Case ( ~test = 1 ;
						 ~hire_Month_Day &amp; "/" &amp; ~Selected_Year ;
						 ~hire_Month_Day &amp; "/" &amp; ~Selected_Year + 1) 
							); 

~result = Case ( IsValid ( $Range_date_start ) and IsValid ( $Range_date_end ) ; 1 ; 0 )  ];

~result 
//&amp;¶&amp; $Range_date_start &amp; " - " &amp; $Range_date_end
	 )</Calculation></CustomFunction><CustomFunction id="14" functionArity="3" visible="True" parameters="s;e;t" name="AppointmentDateRange"><Calculation>Case(

t ="Daily";
Case ( s &lt; e ; GetAsText( s ) &amp; "¶" &amp; AppointmentDateRange (s+1; e; t) ; GetAsText ( e ) );

t="Weekly";
Case ( s &lt; e ; 
GetAsText(s) &amp; "¶" &amp; AppointmentDateRange ( s+7;e; t);
If(Mod((s - e);7) = 0; GetAsText(e);""));

t="Monthly";
Case ( s&lt; e ; 
GetAsText(s) &amp; "¶" &amp; AppointmentDateRange ( Date ( Month ( s )+1 ; Day ( s ) ; Year ( s ) );e; t);
If(Day ( s ) = Day ( e );GetAsText(e);""));

t="Yearly";
Case ( s&lt; e ; 
GetAsText(s) &amp; "¶" &amp; AppointmentDateRange ( Date ( Month ( s ) ; Day ( s ) ; Year ( s )+1 );e; t);
If(Year( s ) = Year ( e );GetAsText(e);""));

""
)</Calculation></CustomFunction><CustomFunction id="20" functionArity="1" visible="True" parameters="date_field" name="dateformatzeros"><Calculation>//dateformatzeros
//date_field
Let(
[
d = GetAsText(date_field);
mm = If( PatternCount ( Left(d;2) ; "/" );"0" &amp; Left(d;1);Left(d;2));
dd = If(PatternCount ( Middle ( d ; Position ( d ; "/" ; 1 ; 1 )+1 ; 2 ) ; "/" );"0" &amp; Middle ( d ; Position ( d ; "/" ; 1 ; 1 )+1 ; 1 );Middle ( d ; Position ( d ; "/" ; 1 ; 1 )+1 ; 2 ));
yyyy = Right(d;4)
];
If(IsEmpty(d);"";mm &amp; "/" &amp; dd &amp; "/" &amp; yyyy)
)</Calculation></CustomFunction><CustomFunction id="8" functionArity="3" visible="True" parameters="StartDate;EndDate;RangeLimit" name="DateRange"><Calculation>Case( 

IsEmpty ( StartDate ) or IsEmpty ( EndDate ) ; "Please fill in both fields." ;

StartDate &gt; EndDate ; "Start date must be earlier than end date." ; 

( EndDate - StartDate ) &gt; ( RangeLimit * 365 ) ; "Date range has exceeded the limit of " &amp; RangeLimit &amp; " years." ;

Case ( EndDate &gt; StartDate ; 

DateRange ( StartDate; EndDate - 1; RangeLimit) &amp; "¶" &amp; EndDate ; EndDate

))</Calculation></CustomFunction><CustomFunction id="24" functionArity="3" visible="True" parameters="StartDate;EndDate;Weekend" name="DateRangeConditWeekends"><Calculation>/*Comments to linkwitz_riley-form@yahoo.es
Weekend values are: 0 to omit weekends or 1 to include them. */

Case ( StartDate &gt; EndDate ; "EndDate must be later than StartDate" ; 
Case ( EndDate &gt; StartDate and not IsEmpty ( StartDate ) and not IsEmpty ( EndDate ); 
DateRangeConditWeekends ( StartDate ; EndDate - 1 ; Weekend ) ) &amp; 
Case ( Weekend = 0 ; Case ( DayOfWeek ( EndDate ) ≠ 1 and DayOfWeek ( EndDate ) ≠ 7 ; EndDate &amp; "¶" ) ; Weekend = 1 ; EndDate &amp; "¶" ) )</Calculation></CustomFunction><CustomFunction id="9" functionArity="2" visible="True" parameters="s;e" name="DayRange"><Calculation>Case ( s &lt; e ; GetAsText( s ) &amp; "¶" &amp; DayRange (s+1 ; e ) ; GetAsText ( e ) )</Calculation></CustomFunction><CustomFunction id="79" functionArity="1" visible="True" parameters="StartDay" name="FirstDayThisWeek"><Calculation>/*FirstDayThisWeek ( StartDay )

 FirstDayThisWeek ( StartDay )

StartDay is 1 for Sunday, 2 for Monday, etc.*/

Get ( CurrentDate ) - ( DayOfWeek ( Get ( CurrentDate ) ) - StartDay )</Calculation></CustomFunction><CustomFunction id="11" functionArity="2" visible="True" parameters="s;e" name="MonthRange"><Calculation>Case ( s&lt; e ; 
GetAsText(s) &amp; "¶" &amp; MonthRange ( Date ( Month ( s )+1 ; Day ( s ) ; Year ( s ) ); e);
If(Day ( s ) = Day ( e );GetAsText(e);"")
)</Calculation></CustomFunction><CustomFunction id="82" functionArity="1" visible="True" parameters="_Date" name="SQLDate_to_FMPDate"><Calculation>//SQLDate_to_FMPDate

Let ( [ y = Left ( _Date ; 4 ) ; 
m = Middle ( _Date ; 6 ; 2 ) ; 
d = Middle ( _Date ; 9 ; 2 ) ] ; 
Date ( m ; d ; y ) )</Calculation></CustomFunction><CustomFunction id="23" functionArity="4" visible="True" parameters="TheDate;StartingDay;StartMonth;StartDay" name="WeekofFiscalYear"><Calculation>Let(
   [
      d = Date(StartMonth;StartDay;Year(TheDate)) ;
      dp = Date(StartMonth;StartDay;Year(TheDate)-1) ;
      s = d + Mod(StartingDay-DayOfWeek( d )+3;7)-3 ;
      sp = dp + Mod(StartingDay-DayOfWeek( dp )+3;7)-3 ;
      FY_Start = Case( TheDate &gt;= s ; s ; sp )
   ] ;
   Int( (TheDate - FY_Start)/7) + 1
)</Calculation></CustomFunction><CustomFunction id="10" functionArity="2" visible="True" parameters="s;e" name="WeekRange"><Calculation>Case ( s &lt; e ; 
GetAsText(s) &amp; "¶" &amp; WeekRange ( s+7; e);
If(Mod((s - e);7) = 0; GetAsText(e);""))</Calculation></CustomFunction><CustomFunction id="126" functionArity="7" visible="True" parameters="startDate;endDate;fontSize;separator;red;green;blue" name="YearMonthYear"><Calculation>/*************************************************************************************************

	Created by Nick Hunter 

	Returns how many Years, Months and Days between two dates.


*************************************************************************************************/

Let	( 
	[ 
	number = endDate - startDate ; 
	color = RGB ( red ; green ; blue ) ; // Color

	year = number / 365 ; 
	month = number / 30.41 ; 
	day = number / 24 ; 

	years365 = Int ( month / 12 ) ; 
	months365 = Int ( Mod ( month ; 12 ) ) ; 
	days365 = Int ( Mod ( number ; 30.41 ) ) ; 

	months = Int ( number / 30 ) ; 
	days = Int ( Mod ( number ; 30.41 ) ) ; 

	years365Label = If ( years365 &gt; 1 ; " years¶" ; " year¶" ) ; 
	days365Label = If ( days365 &gt; 1 ; " days" ; " day" ) ; 

	daysLabel = If ( days &gt; 1 ; " days" ; " day" ) ; 

	text = 
		If ( number ≥ 365 ; 

		TextSize ( TextColor ( years365; color ) ; fontSize ) &amp; years365Label &amp; 
		TextSize ( TextColor ( months365; color ) ; fontSize ) &amp; " months¶" &amp; 
		TextSize ( TextColor ( days365; color ) ; fontSize ) &amp; days365Label ; 

	
		TextSize ( TextColor ( months ; color ) ; fontSize ) &amp; " months¶" &amp; 
		TextSize ( TextColor ( days ; color ) ; fontSize ) &amp; daysLabel
		)
	] ; 


	Substitute ( text ; ¶ ; separator )

	)</Calculation></CustomFunction><CustomFunction id="12" functionArity="2" visible="True" parameters="s;e" name="YearRange"><Calculation>Case ( s&lt; e ; 
GetAsText(s) &amp; "¶" &amp; YearRange ( Date ( Month ( s ) ; Day ( s ) ; Year ( s )+1 ); e);
If(Year( s ) = Year ( e );GetAsText(e);"")
)</Calculation></CustomFunction><CustomFunction id="118" functionArity="2" visible="True" parameters="StartDate;DueDate" name="GetWorkDays"><Calculation>/*************************************************************************************************

	Created by Nick Hunter 

	Returns the amount of business days between two dates (ignoring weekends Saturday-Sunday).


*************************************************************************************************/

Int 	( ( DueDate - StartDate ) / 7 ) * 5 

+ 

Case 	( 
		DayOfWeek ( DueDate ) &lt; DayOfWeek ( StartDate ) ; 
		Min ( 5 ; DayOfWeek ( DueDate ) - 1 ) + Max ( 0 ; 6 - DayOfWeek ( StartDate ) ) ;

		DayOfWeek ( StartDate ) &lt; 7 ; 
		Min ( 6 ; DayOfWeek ( DueDate ) ) - DayOfWeek ( StartDate ) ; 

		0 
		) + 1</Calculation></CustomFunction></fmxmlsnippet></Clipboard><Picture></Picture></FMClipboard>