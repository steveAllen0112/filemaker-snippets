<?xml version="1.0" encoding="UTF-8"?><FMClipboard><Version><![CDATA[41011080]]></Version><Comment></Comment><SourceWindowName></SourceWindowName><Class>XMFN</Class><ClipVersion>1</ClipVersion><ClipTimeStamp>3626275000</ClipTimeStamp><ClipAuthor><![CDATA[wolf]]></ClipAuthor><clipboardAsText><![CDATA[#AssignGlobal( parameters )
#AssignScriptParameters(  )
#AssignScriptResults(  )
#Filter( parameters;filterParameters )
#Get( parameters;name )
#GetNameList( parameters )
#Remove( parameters;removeParameters )]]></clipboardAsText><Clipboard><fmxmlsnippet type="FMObjectList"><CustomFunction id="93" functionArity="1" visible="True" parameters="parameters" name="#AssignGlobal"><Calculation>/**
 * =====================================
 * #AssignGlobal ( parameters )
 *
 * PURPOSE:
 *		Parses a Let dictionary of name-value parameters into a series of
 *		globally scoped $$VARIABLES.
 *
 * RETURNS:
 *		FileMaker's error code from any errors encountered during evaluation.
 *
 * PARAMETERS:
 *		parameters: A Let format dictionary, such as produced by the
 *		# ( name ; value ) function.
 *
 * DEPENDENCIES: none
 *
 * NOTES:
 *		Notes go here
 *
 * HISTORY:
 *		CREATED on 2012-12-04 by Jeremy Bante &lt;http://scr.im/jbante&gt;.
 * =====================================
 */

Let ( [
	~error =
		EvaluationError ( Evaluate (
			"Let ( ["
			&amp; Substitute (	// convert $local to $$GLOBAL variables
				¶ &amp; parameters;
				[ "¶$$" ; "¶$" ];	// ... without renaming existing $$GLOBALS
				[ "¶$" ; "¶$$" ]
			)
			&amp; "¶~ = \"\" ]; ~ )"
		) )
];
	~error = 0	// indicate success or failure of Evaluate()
	or Let ( $#AssignGlobal.error = ~error ; False )	// only runs on error
)</Calculation></CustomFunction><CustomFunction id="142" functionArity="0" visible="True" parameters="" name="#AssignScriptParameters"><Calculation>/**
 * =====================================
 * #AssignScriptParameters
 *
 * PURPOSE:
 * #AssignScriptParameters uses the current script parameter (treated as if
 * generated by the # function) to declare and populate a series of
 * locally-scoped script variables. #AssignScriptParameters also uses the
 * current script name to determine whether or not all required named parameters
 * are populated (≠ Null). This function is NOT equivalent to 
 * #Assign ( Get ( ScriptParameter ) ).
 *
 * RETURNS:
 * True (1) when the script parameter is a valid set of name-value pairs (which
 * includes the empty string) and all parameters defined as required according to
 * the script name are non-null; False (0) otherwise.
 *
 * PARAMETERS: none
 *
 * DEPENDENCIES: none
 *
 * NOTE:
 * To be accessible outside this function, variable declarations in the script
 * parameter must use the $- or $$-prefixed notation for FileMaker variables.
 * This function does not handle that for you.
 *
 * HISTORY:
 * MODIFIED on 2010-10-04 by jeremy@kyologic.com to return explicit True or
 * False values indicating successful evaluation of the script parameter, and to
 * fit syntax inspired by a comment on standards.filemakermagazine.com by
 * Richard Dyce.
 * CREATED on 2010-03-13 by Jeremy Bante of Kyo Logic (jeremy@kyologic.com).
 * INSPIRED by an example in the FileMaker help documentation.
 *
 * REFERENCES:
 * Script Parameter Interface Best Practice: http://filemakerstandards.org/pages/viewpage.action?pageId=557462
 * =====================================
 */
 
Let ( [
        ~evaluateString =
                "Let ( [¶"
                &amp; Get ( ScriptParameter )
                &amp; "$void = $void" //terminating variable to keep semicolon-delimited sytax in ScriptParameter consistent
                &amp; "¶];¶"
                &amp; "True¶)"
];
 
        Case(
                not IsValidExpression ( ~evaluateString );
                        False;
 
                //else, ~evaluateString is a valid expression, so check that required parameters are populated
                        Evaluate ( ~evaluateString )
                        and
                        Let ( [
                                //parse required parameters from script name
                                ~BEGIN = "("; //character marking beginning of named parameters
                                //~END = ")"; //character defining end of named parameters
                                ~DELIMITER = ";"; //character delimiting between named parameters
                                ~OPTIONAL = "{"; //character marking beginning of optional parameters
        
                                ~parameters = Substitute ( Get ( ScriptName ) ; ["¶"; ""]; [" "; ""] );
                                ~beginParameters = Position ( ~parameters ; ~BEGIN ; 1 ; 1 );
                                ~endParameters = Position ( ~parameters ; ~OPTIONAL ; 1 ; 1 );
                                ~endParameters = Case ( not ~endParameters ; Length ( ~parameters ) ; ~endParameters );
                                ~parameters = Middle ( ~parameters ; ~beginParameters + 1 ; ~endParameters - ~beginParameters - 1 );
                                ~parameters =
                                        Substitute (
                                                Trim ( ~parameters ) &amp; "☠";
                                                [ ~DELIMITER &amp; "☠" ; "" ]; //remove possible erroneous trailing delimiter
                                                [ "☠" ; "" ];
                                                [ ~DELIMITER ; "¶" ]
                                        )
                        ];
                                //check that required parameters are non-null
                                Case (
                                        ~beginParameters and Length ( ~parameters ); //script name specifies parameters
                                                Evaluate ( //string returns true when all required parameters are populated
                                                        "Length ( $"
                                                        &amp; Substitute ( ~parameters ; "¶" ; " ) and Length ( $" )
                                                        &amp; " )"
                                                );
                                        
                                        //else, parameters are adequate by default
                                        True
                                )
                        )
        )
)</Calculation></CustomFunction><CustomFunction id="143" functionArity="0" visible="True" parameters="" name="#AssignScriptResults"><Calculation>/**
 * =====================================
 * #AssignScriptResults
 *
 * PURPOSE:
 * #AssignScriptResults uses the current script result (treated as if generated
 * by the # function) to declare and populate a series of locally-scoped script
 * variables. This function is equivalent to #Assign ( Get ( ScriptResult ) ).
 *
 * RETURNS:
 * True (1) when the script result is a valid set of name-value pairs (which
 * includes the empty string); False (0) otherwise.
 *
 * PARAMETERS: none
 *
 * DEPENDENCIES: none
 *
 * NOTE:
 * To be accessible outside this function, variable declarations in the script
 * result must use the $- or $$-prefixed notation for FileMaker variables.
 * This function does not handle that for you.
 *
 * HISTORY:
 * MODIFIED on 2010-10-04 by jeremy@kyologic.com to return explicit True or
 * False values indicating successful evaluation of the script result, and to
 * fit syntax inspired by a comment on standards.filemakermagazine.com by
 * Richard Dyce.
 * CREATED on 2010-08-25 by Jeremy Bante of Kyo Logic (jeremy@kyologic.com).
 * INSPIRED by an example in the FileMaker help documentation.
 *
 * REFERENCES:
 * Script Parameter Interface Best Practice: http://filemakerstandards.org/pages/viewpage.action?pageId=557462
 * =====================================
 */
 
Let (
        ~evaluateString = //string to evaluate to declare variables
                "Let ( [¶"
                &amp; Get ( ScriptResult )
                &amp; "$void = $void" //terminating variable to keep semicolon-delimited sytax in variableString consistent
                &amp; "¶];¶" 
                &amp; "True¶)";
 
        //end variable definitions
 
        Case (
                IsValidExpression ( ~evaluateString );
                        Evaluate ( ~evaluateString );
 
                //else, ~evaluateString is not a valid expression...
                        False //return error
        )
)</Calculation></CustomFunction><CustomFunction id="144" functionArity="2" visible="True" parameters="parameters;filterParameters" name="#Filter"><Calculation>/**
 * =====================================
 * #Filter ( parameters ; filterParameters )
 *
 * RETURNS:
 *		A list of Let notation name-value pairs from parameters with names in
 *		filterParameters. Any pairs with names not in filterParameters will not
 *		be included.
 *
 * PARAMETERS:
 *		parameters: A string of serialized name-value pair data in Let notation.
 *		filterParameters: A return-delimited list of parameter names to include
 *		in the result.
 *
 * EXAMPLE:
 *		#Assign ( #Filter (
 *			# ( "name" ; "value" )
 *			&amp; # ( "foo" ; "bar" );
 *			List ( "name" ; "otherName" )
 *		) )
 *		// variable $name assigned "value"; $foo and $otherName are unaffected
 *
 * DEPENDENCIES: none
 *
 * HISTORY:
 *		CREATED on 2012-11-28 by Jeremy Bante &lt;http://scr.im/jbante&gt;.
 * =====================================
 */

Case (
	/* Step 0, set-up */
	not $#Filter.step ;
		Let ( [
			~empty = IsEmpty ( parameters ) or IsEmpty ( filterParameters ) ;
			filterParameters =	// add "$" prefix for matching
				Substitute ( ¶ &amp; filterParameters ; ¶ ; "¶$" ) ;
			filterParameters =	// add "$$" prefix for backwards-compatibility
				filterParameters
				&amp; Substitute ( filterParameters ; ¶ ; "¶$" )
				&amp; ¶ ;

			$#Filter.parameterCount = ValueCount ( parameters ) ;
			$#Filter.step = If ( ~empty ; -1 ; /* Else */ 1 )
		];
			#Filter ( parameters ; filterParameters )
		);

	/* Step 1, check each parameter */
	$#Filter.step = 1 ;
		Let ( [
			$#Filter.i = $#Filter.i + 1 ;
			~pair = GetValue ( parameters ; $#Filter.i ) ;
			~name = Left ( ~pair ; Position ( ~pair ; " = " ; 1 ; 1 ) - 1 ) ;
			$#Filter.result =
				// only include ~pair if ~name is in filterParameters
				List (
					$#Filter.result ;
					If ( Position ( filterParameters ; ¶ &amp; ~name &amp; ¶ ; 1 ; 1 ) &gt; 0;
						~pair
					)
				);

			$#Filter.step =
				If ( $#Filter.i &lt; $#Filter.parameterCount ;
					$#Filter.step ;
					/* Else */ $#Filter.step + 1
				)
		];
			#Filter ( parameters ; filterParameters )
		);

	/* Step 2, clean-up and return result */
	$#Filter.step = 2 or $#Filter.step = -1 ;
		Let ( [
			~error = $#Filter.step = -1 ;
			~result = $#Filter.result ;

			// purge variables
			$#Filter.i = "" ;
			$#Filter.parameterCount = "" ;
			$#Filter.result = "" ;
			$#Filter.step = ""
		];
			If ( ~error ; "" ; /* Else */ ~result )
		)
)</Calculation></CustomFunction><CustomFunction id="145" functionArity="2" visible="True" parameters="parameters;name" name="#Get"><Calculation>/**
 * =====================================
 * #Get ( parameters ; name )
 *
 * RETURNS:
 *		A named value from a string of name-value pairs.
 *
 * PARAMETERS:
 *		parameters: A string of name-value pairs
 *		name: The name to retrieve the value of
 *
 * DEPENDENCIES: none
 *
 * NOTES:
 *		When a name is defined more than once in parameters, the last value is
 *		returned.
 *
 * HISTORY:
 *		MODIFIED on 2013-01-08 by Jeremy Bante &lt;http://scr.im/jbante&gt; to handle
 *		leading $$ and $ in the name parameter the same as the
 *		# ( name ; value ) function, based on a comment by Dan Smith.
 *		CREATED on 2012-12-05 by Jeremy Bante &lt;http://scr.im/jbante&gt;.
 * =====================================
 */

Let ( [
	parameters = ¶ &amp; parameters &amp; ¶;
	name =	// strip any leading $$ or $ for backwards compatibility
		Substitute ( ¶ &amp; name ; [ "¶$$" ; "" ] ; [ "¶$" ; "" ] ; [ ¶ ; "" ] ) ;

	~length = Length ( parameters );
	~namePosition =	// position of last occurrence of name
		Position ( parameters ; "¶$" &amp; name &amp; " = " ; ~length ; -1 );
	~namePosition =	// check for $$global name for backwards compatibility
		If ( ~namePosition &gt; 0;
			~namePosition;
		/* Else */
			Position ( parameters ; "¶$$" &amp; name &amp; " = " ; ~length ; -1 )
		);

	~valueStart = Position ( parameters ; " = " ; ~namePosition ; 1 ) + 3;
	~valueEnd = Position ( parameters ; ";¶" ; ~namePosition ; 1 );
	~value = Middle ( parameters ; ~valueStart ; ~valueEnd - ~valueStart )
];
	// check that ~value exists and is valid
	If ( ~namePosition &gt; 0 and IsValidExpression ( ~value );
		Evaluate ( ~value )
	)
)</Calculation></CustomFunction><CustomFunction id="146" functionArity="1" visible="True" parameters="parameters" name="#GetNameList"><Calculation>/**
 * =====================================
 * #GetNameList ( parameters )
 *
 * RETURNS:
 *		A return-delimited list of names from the name-value pairs in parameters.
 *
 * PARAMETERS:
 *		parameters: A string of serialized name-value pair data in Let notation.
 *
 * EXAMPLE:
 *		#GetNameList (
 *			# ( "name" ; "value" )
 *			&amp; # ( "foo" ; "bar" );
 *		) = List ( "name" ; "foo" )
 *
 * DEPENDENCIES: none
 *
 * HISTORY:
 *		CREATED on 2013-01-24 by Daniel Smith dansmith65@gmail.com
 * =====================================
 */

Case (
	/* Step 0, set-up */
	not $#GetNameList.step ;
		Let ( [
			~empty = IsEmpty ( Trim ( parameters ) ) ;
			parameters =
				Substitute (
					¶ &amp; parameters ;
					[ "¶$" ; ¶ ] ;		// remove "$" prefix
					[ "¶$" ; ¶ ] ;		// remove "$$" prefix
					[ "¶¶" ; ¶ ]		// remove empty values
				) ;

			$#GetNameList.parameterCount = ValueCount ( parameters ) ;
			$#GetNameList.step = If ( ~empty ; -1 ; /* Else */ 1 )
		];
			#GetNameList ( parameters )
		);

	/* Step 1, check each parameter */
	$#GetNameList.step = 1 ;
		Let ( [
			$#GetNameList.i = $#GetNameList.i + 1 ;
			~pair = GetValue ( parameters ; $#GetNameList.i ) ;
			~name = Left ( ~pair ; Position ( ~pair ; " = " ; 1 ; 1 ) - 1 ) ;
			$#GetNameList.result =
				// only include ~name if it isn't already in the result
				List (
					$#GetNameList.result ;
					If ( IsEmpty ( FilterValues ( $#GetNameList.result ; ~name ) ) ;
						~name
					)
				);

			$#GetNameList.step =
				If ( $#GetNameList.i &lt; $#GetNameList.parameterCount ;
					$#GetNameList.step ;
					/* Else */ $#GetNameList.step + 1
				)
		];
			#GetNameList ( parameters )
		);

	/* Step 2, clean-up and return result */
	$#GetNameList.step = 2 or $#GetNameList.step = -1 ;
		Let ( [
			~error = $#GetNameList.step = -1 ;
			~result = $#GetNameList.result ;

			// purge variables
			$#GetNameList.i = "" ;
			$#GetNameList.parameterCount = "" ;
			$#GetNameList.result = "" ;
			$#GetNameList.step = ""
		];
			If ( ~error ; "" ; /* Else */ ~result )
		)
)</Calculation></CustomFunction><CustomFunction id="147" functionArity="2" visible="True" parameters="parameters;removeParameters" name="#Remove"><Calculation>/**
 * =====================================
 * #Remove ( parameters ; removeParameters )
 *
 * RETURNS:
 *		A #-format dictionary based on parameters, but with all values named in
 *		removeParameters removed.
 *
 * PARAMETERS:
 *		parameters: A string of name-value pairs
 *		removeParameters: The names of name-value pairs to remove.
 *
 * DEPENDENCIES: none
 *
 * NOTES:
 *		This is a recursive function.
 *
 * HISTORY:
 *		MODIFIED on 2013-03-15 by Daniel Smith &lt;http://scr.im/dansmith&gt; to add
 *		trailing return if it doesn't exist.
 *		MODIFIED on 2013-01-08 by Jeremy Bante &lt;http://scr.im/jbante&gt; to extend
 *		the function to remove multiple names from a return-delimited list.
 *		CREATED on 2012-12-20 by Daniel Smith &lt;http://scr.im/dansmith&gt;
 * =====================================
 */

Case (
	/* Step 0, set-up */
	not $#Remove.step ;
		Let ( [
			~empty = IsEmpty ( parameters ) or IsEmpty ( removeParameters ) ;
			removeParameters =	// add "$" prefix for matching
				Substitute ( ¶ &amp; removeParameters ; ¶ ; "¶$" ) ;
			removeParameters =	// add "$$" prefix for backwards-compatibility
				removeParameters
				&amp; Substitute ( removeParameters ; ¶ ; "¶$" )
				&amp; ¶ ;

			$#Remove.parameterCount = ValueCount ( parameters ) ;
			$#Remove.step = If ( ~empty ; -1 ; /* Else */ 1 )
		];
			#Remove ( parameters ; removeParameters )
		);

	/* Step 1, check each parameter */
	$#Remove.step = 1 ;
		Let ( [
			$#Remove.i = $#Remove.i + 1 ;
			~pair = GetValue ( parameters ; $#Remove.i ) ;
			~name = Left ( ~pair ; Position ( ~pair ; " = " ; 1 ; 1 ) - 1 ) ;
			$#Remove.result =
				// only include ~pair if ~name is not in removeParameters
				List (
					$#Remove.result ;
					If ( Position ( removeParameters ; ¶ &amp; ~name &amp; ¶ ; 1 ; 1 ) = 0;
						~pair
					)
				);

			$#Remove.step =
				If ( $#Remove.i &lt; $#Remove.parameterCount ;
					$#Remove.step ;
					/* Else */ $#Remove.step + 1
				)
		];
			#Remove ( parameters ; removeParameters )
		);

	/* Step 2, clean-up and return result */
	$#Remove.step = 2 or $#Remove.step = -1 ;
		Let ( [
			~error = $#Remove.step = -1 ;
			~result =
				$#Remove.result
				// add trailing return if it doesn't exist
				&amp; If (
					not IsEmpty ( $#Remove.result )
					and Right ( $#Remove.result ; 1 ) ≠ ¶ ;
					¶
				) ;

			// purge variables
			$#Remove.i = "" ;
			$#Remove.parameterCount = "" ;
			$#Remove.result = "" ;
			$#Remove.step = ""
		];
			If ( ~error ; parameters ; /* Else */ ~result )
		)
)</Calculation></CustomFunction></fmxmlsnippet></Clipboard><Picture></Picture></FMClipboard>